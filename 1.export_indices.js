////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  Base Script Set
////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var baseModule = require('users/biplov/bhutan-aces-v-1:main.js');


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  ROI
////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var ROI = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017').filter(ee.Filter.eq('country_na','Bhutan'));


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  Input Imagery
////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var LS8 = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2");
var LS7 = ee.ImageCollection("LANDSAT/LE07/C02/T2_L2");
var S2 = ee.ImageCollection('COPERNICUS/S2_SR');
// we are using TOA for the Tasseled Cap
// you can use SR product here but be mindful of the coefficients of the matrix
// see indices.js for the information on the coefficients.
var LS8_TOA = ee.ImageCollection('LANDSAT/LC08/C02/T1_TOA');


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  INPUT NEEDED BLOCK
////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// we used one composite per season so all the months go here.
// if you want to make montly composite; use one month at a time
var monthsList = [5, 6, 7, 8, 9, 10]; // <--- INPUT NEEDED: MONTHS
// the year list needs one year at a time
var yearsList = [2020]; // <--- INPUT NEEDED: YEAR NUMBER

// export path
var exportPath = 'projects/servir-sco-assets/assets/Bhutan/Rice_Extent_Mapper/Composite_' + yearsList[0]; // <-- INPUT NEEDED: USE CORRECT PATH

// s1 descending export path
var s1DescendingPath = 'projects/servir-sco-assets/assets/Bhutan/Sentinel1Descending';
// s1 ascending export path
var s1AscendingPath = 'projects/servir-sco-assets/assets/Bhutan/Sentinel1Ascending';


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  Extract Dates
////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


var listofDates = [];

for (var i = 0; i<monthsList.length; i++) {
  // year is hardcoded for now because we know we will have one year at a time
  var startDate = ee.Date.fromYMD(yearsList[0], monthsList[i], 1);
  var dict = {
    'startDate': startDate,
    'endDate'  : startDate.advance(1, 'month').advance(-1, 'day')
  };
  listofDates.push(dict);
}
listofDates = ee.List(listofDates);


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  Landsat 8 Dancing
////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var l8FinalCollection =  ee.ImageCollection(
  baseModule.utils.timePeriodSelector(LS8, monthsList, yearsList, ROI)
).sort('system:time_start');

l8FinalCollection = l8FinalCollection.select(['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'QA_PIXEL']);

l8FinalCollection = l8FinalCollection.map(function (img) {
  return img.rename(['blue', 'green', 'red', 'nir', 'swir1', 'QA_PIXEL']);
});


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  Landsat 7 Dancing
////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var l7FinalCollection = ee.ImageCollection(
  baseModule.utils.timePeriodSelector(LS7, monthsList, yearsList, ROI)
).sort('system:time_start');

l7FinalCollection = l7FinalCollection.select(['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'QA_PIXEL']);

l7FinalCollection = l7FinalCollection.map(function (img) {
  return img.rename(['blue', 'green', 'red', 'nir', 'swir1', 'QA_PIXEL']);
});



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  Landsat 7 and 8 Merge Dancing
////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

print('l7FinalCollection', l7FinalCollection);
print('l8FinalCollection', l8FinalCollection);

var _landsatCollection = baseModule.routine.getL7L8ReducedImage(listofDates, l8FinalCollection, l7FinalCollection);
var landsatCollection = ee.ImageCollection(_landsatCollection);

// doing a median now since the getL7L8ReducedImage has maximum extent via the mosaic method
var landsatImage = landsatCollection.median();
// notice this still has QA_PIXEL; however this can be dropped since we already used the QA_PIXEL per image wise
print('landsatImage', landsatImage);
landsatImage = landsatImage.select(['red', 'green', 'blue', 'nir', 'swir1']).float();
var landsatIndices = baseModule.indices.calculateL7L8Indices(landsatImage).float();
print('landsatIndices', landsatIndices);

Map.addLayer(landsatImage.clip(ROI), {bands:['swir1', 'nir', 'red'], min:0.04, max:0.4}, 'landsatCollectionMedian');
Map.addLayer(landsatIndices.clip(ROI), {min:0.04, max:0.4}, 'landsatIndices');

// parameters to the function call are: image, description, region, scale, assetId
baseModule.utils.exportImageAsset(landsatImage, 'LandsatComposite_' + yearsList[0], ROI, 30, exportPath + '/LandsatComposite_'+ yearsList[0]);
baseModule.utils.exportImageAsset(landsatIndices, 'LandsatCompositeIndices_' + yearsList[0], ROI, 30, exportPath + '/LandsatIndices_' + yearsList[0]);


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  Sentinel 2 Dancing
////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var s2FinalCollection =  ee.ImageCollection(
  baseModule.utils.timePeriodSelector(S2, monthsList, yearsList, ROI)
).sort('system:time_start');

s2FinalCollection = baseModule.routine.maskS2Collection(s2FinalCollection);
print('s2FinalCollection', s2FinalCollection);

var s2FinalImage = s2FinalCollection.median();
var s2Indices = baseModule.indices.calculateS2Indices(s2FinalImage).float();
s2FinalImage = s2FinalImage.select(['B4', 'B3', 'B2', 'B8', 'B11'], ['red', 'green', 'blue', 'nir', 'swir1']).float();

print('s2FinalImage', s2FinalImage);
print('s2Indices', s2Indices);
Map.addLayer(s2FinalImage.clip(ROI), {bands:['swir1', 'nir', 'red'], min:0.01, max:0.4}, 's2CollectionMedian');
Map.addLayer(s2Indices.clip(ROI), {}, 's2Indices');

baseModule.utils.exportImageAsset(s2FinalImage, 'S2Composite_' + yearsList[0], ROI, 30, exportPath + '/S2Composite_' + yearsList[0]);
baseModule.utils.exportImageAsset(s2Indices, 'S2CompositeIndices_' + yearsList[0], ROI, 30, exportPath + '/S2Indices_' + yearsList[0]);



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  Tasseled Cap Dancing
////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var l8ToaFinalCollection =  ee.ImageCollection(
  baseModule.utils.timePeriodSelector(LS8_TOA, monthsList, yearsList, ROI)
).sort('system:time_start');
l8ToaFinalCollection = l8ToaFinalCollection.select(['B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'QA_PIXEL']);

l8ToaFinalCollection = l8ToaFinalCollection.map(function (img) {
  return img.rename(['blue', 'green', 'red', 'nir', 'swir1', 'swir2', 'QA_PIXEL']);
});

var l8ToaTcIndices = baseModule.indices.calculateL8ToaTasseledCapIndices(l8ToaFinalCollection).float();

print('l8ToaTcIndices', l8ToaTcIndices);

Map.addLayer(l8ToaTcIndices.clip(ROI), {}, 'l8ToaTcIndices');

baseModule.utils.exportImageAsset(l8ToaTcIndices, 'l8ToaTcIndices_' + yearsList[0], ROI, 30, exportPath + '/landsatTasseledCapIndices_' + yearsList[0]);


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  Sentinel 1 Dancing
////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////  Descend Dancing
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var s1DescendingFinal = ee.ImageCollection(s1DescendingPath + yearsList[0]);

s1DescendingFinal = s1DescendingFinal.filterDate(yearsList[0] + '-' + monthsList[0] + '-01', yearsList[0] + '-' + (monthsList[monthsList.length - 1] + 1) + '-01');

s1DescendingFinal = baseModule.indices.calculateS1Indices(s1DescendingFinal).float();

print('s1DescendingFinal', s1DescendingFinal);

Map.addLayer(s1DescendingFinal.clip(ROI), {}, 's1DescendingFinal');

baseModule.utils.exportImageAsset(s1DescendingFinal, 's1DescendingFinal_' + yearsList[0], ROI, 30, exportPath + '/s1Descending_'  + yearsList[0]);



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////  Ascend Dancing
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var s1AscendingFinal = ee.ImageCollection(s1AscendingPath + yearsList[0]);
s1AscendingFinal = s1AscendingFinal.filterDate(yearsList[0] + '-' + monthsList[0] + '-01', yearsList[0] + '-' + (monthsList[monthsList.length - 1] + 1) + '-01');

s1AscendingFinal = baseModule.indices.calculateS1Indices(s1AscendingFinal).float();

print('s1AscendingFinal', s1AscendingFinal);

Map.addLayer(s1AscendingFinal.clip(ROI), {}, 's1AscendingFinal');

baseModule.utils.exportImageAsset(s1AscendingFinal, 's1AscendingFinal_' + yearsList[0], ROI, 30, exportPath + '/s1Ascending_' + yearsList[0]);

