var monthsList = [4, 5, 6, 7, 8];
var yearsList = [2021];


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  Base Script Set
////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var baseModule = require('users/biplovbhandari/Rice_Mapping_Bhutan:main.js');



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  ROI
////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var ROI = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017').filter(ee.Filter.eq('country_na','Bhutan'));
var l1 = ee.FeatureCollection("projects/servir-sco-assets/assets/Bhutan/BT_Admin_1");
var paro = l1.filter(ee.Filter.eq('ADM1_EN', 'Paro'));

Map.addLayer(ROI, {color: 'red'}, 'ROI', false);
// Map.centerObject(ROI, 9.5);
Map.centerObject(ROI);


var samplePoints = ee.FeatureCollection("projects/servir-sco-assets/assets/Bhutan/ACES_2/stratifiedPoints_paro_2021"),
    sampleBuffer = ee.FeatureCollection("projects/servir-sco-assets/assets/Bhutan/ACES_2/stratifiedPoints_buffered_paro_2021");
    
var S2 = ee.ImageCollection('COPERNICUS/S2_SR');


var planet = ee.ImageCollection("projects/planet-nicfi/assets/basemaps/asia");
planet = planet.filterDate('2021-04-01', '2021-10-30');
planet = planet.map(function(img){
  var nd = img.normalizedDifference(['N', 'R']).rename('ndvi');
  return img.addBands(nd);
});


var s1Descending =  ee.ImageCollection('COPERNICUS/S1_GRD')
            .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
            .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
            .filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'))
            .filter(ee.Filter.eq('instrumentMode', 'IW'));

var s1Ascending = ee.ImageCollection('COPERNICUS/S1_GRD')
            .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
            .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
            .filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))
            .filter(ee.Filter.eq('instrumentMode', 'IW'));



var ricePlotId = 234;
var forestPlotId = 533;
var builtupPlotId = 1477;
var waterPlotId = 1833;


var ricePlot = sampleBuffer.filter(ee.Filter.eq('SAMPLEID', ricePlotId));
var forestPlot = sampleBuffer.filter(ee.Filter.eq('SAMPLEID', forestPlotId));
var builtupPlot = sampleBuffer.filter(ee.Filter.eq('SAMPLEID', builtupPlotId));
var waterPlot = sampleBuffer.filter(ee.Filter.eq('SAMPLEID', waterPlotId));


var s2FinalCollection =  ee.ImageCollection(
  baseModule.utils.timePeriodSelector(S2, monthsList, yearsList, ROI)
).sort('system:time_start');

s2FinalCollection = baseModule.routine.maskS2Collection(s2FinalCollection);

var s2FinalComposites = ee.ImageCollection(baseModule.utils.getMedianCompositePerMonth(s2FinalCollection, monthsList, yearsList, ROI));
// print('s2FinalComposites', s2FinalComposites);

s2FinalComposites = s2FinalComposites.map(function (img) {
  var indices = baseModule.indices.calculateS2Indices(img).float();
  img = img.select(['B4', 'B3', 'B2', 'B8', 'B11'], ['red', 'green', 'blue', 'nir', 'swir1']).float();
  img = img.addBands(indices);
  return img;
});
// print('s2FinalComposites', s2FinalComposites);

Map.addLayer(s2FinalComposites.filterDate('2021-06-01', '2021-06-23').first(), {bands: ['red', 'green', 'blue'], min:0, max:0.3}, 'sept');


var COLOR = {
  CROPLAND: '000000',
  FOREST: '00ff00',
  BUILTUP: 'ff0000',
  WATER: '0000ff',
};

var ricePlotF = ee.Feature(ricePlot.geometry(), {label: 'Rice'});
var forestPlotF = ee.Feature(forestPlot.geometry(), {label: 'Forest'});
var buildupPlotF = ee.Feature(builtupPlot.geometry(), {label: 'Builtup'});
var waterPlotF = ee.Feature(waterPlot.geometry(), {label: 'Water'});

var regions = new ee.FeatureCollection([ricePlotF, forestPlotF, buildupPlotF, waterPlotF]);

Map.centerObject(regions, 13);

var bandName = 'NDVI';

var timeSeries = ui.Chart.image.seriesByRegion({
  imageCollection: s2FinalComposites,
  regions: regions,
  reducer: ee.Reducer.mean(),
  band: 'S2_' + bandName,
  scale: 30,
  xProperty: 'system:time_start',
  seriesProperty: 'label'
});
timeSeries.setChartType('ScatterChart');
timeSeries.setOptions({
  title: bandName + ' over time in selected plots in Paro',
  vAxis: {
    title: bandName
  },
  lineWidth: 2,
  pointSize: 6,
  series: {
    0: {color: COLOR.CROPLAND},
    1: {color: COLOR.FOREST},
    2: {color: COLOR.BUILTUP},
    3: {color: COLOR.WATER},
  }
});

print(timeSeries);

var timeSeries2 = ui.Chart.image.seriesByRegion({
  imageCollection: planet.filterDate('2021-04-01', '2021-10-30'),
  regions: regions,
  reducer: ee.Reducer.mean(),
  band: 'ndvi',
  scale: 30,
  xProperty: 'system:time_start',
  seriesProperty: 'label'
});
timeSeries2.setChartType('ScatterChart');
timeSeries2.setOptions({
  title: bandName + ' over time in selected plots in Paro',
  vAxis: {
    title: bandName
  },
  lineWidth: 2,
  pointSize: 6,
  series: {
    0: {color: COLOR.CROPLAND},
    1: {color: COLOR.FOREST},
    2: {color: COLOR.BUILTUP},
    3: {color: COLOR.WATER},
  }
});

print(timeSeries2);




Map.addLayer(ricePlot.draw(COLOR.CROPLAND), {}, 'Rice');
Map.addLayer(forestPlot.draw(COLOR.FOREST), {}, 'Forest');
Map.addLayer(builtupPlot.draw(COLOR.BUILTUP), {}, 'Builtup');
Map.addLayer(waterPlot.draw(COLOR.WATER), {}, 'Water');

