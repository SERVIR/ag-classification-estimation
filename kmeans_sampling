/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var imageCollection = ee.ImageCollection("projects/planet-nicfi/assets/basemaps/asia"),
    samplePoints = ee.FeatureCollection("projects/servir-sco-assets/assets/Bhutan/ACES_2/stratifiedPoints_paro_2021"),
    sampleBuffer = ee.FeatureCollection("projects/servir-sco-assets/assets/Bhutan/ACES_2/stratifiedPoints_buffered_paro_2021");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var createPanel = function () {
  return ui.Panel({
    style: {
      position: 'bottom-left',
      padding: '8px 15px'
      }
  });
};

// Creates and styles 1 row of the legend.
var makeRow = function(color, name) {
  // Create the label that is actually the colored box.
  var colorBox = ui.Label({
    style: {
      backgroundColor: '#' + color,
      // Use padding to give the box height and width.
      padding: '8px',
      margin: '0 0 4px 0'
    }
  });
  
  // Create the label filled with the description text.
  var description = ui.Label({
    value: name,
    style: {margin: '0 0 4px 6px'}
  });
  
  // return the panel
  return ui.Panel({
    widgets: [colorBox, description],
    layout: ui.Panel.Layout.Flow('horizontal')
  });
};

// Add the title to the panel
var addLegendTitle = function (name, legend) {
  // Create legend title
  var legendTitle = ui.Label({
    value: name,
    style: {
      fontWeight: 'bold',
      fontSize: '18px',
      margin: '0 0 4px 0',
      padding: '0'
      }
  });
  legend.add(legendTitle);
};



////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////


// boundary
var world = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017');
var bhutan = world.filter(ee.Filter.eq('country_na','Bhutan'));

// elevation
var dem = ee.Image("MERIT/DEM/v1_0_3"); //ee.Image('USGS/SRTMGL1_003');
dem = dem.clip(bhutan);

// year
var year = 2021;

// admin and geom
var adminL1 = ee.FeatureCollection("projects/servir-sco-assets/assets/Bhutan/BT_Admin_1");
print('level 1 admin', adminL1.aggregate_array('ADM1_EN'));
var paro = adminL1.filter(ee.Filter.eq('ADM1_EN', 'Paro'));
Map.addLayer(paro, {}, 'paro', false);

// Monthly mosaic from Planet
var imgJan = imageCollection.filterBounds(bhutan.geometry()).filterDate(year + '-01-01', year + '-01-30').first();
var imgFeb = imageCollection.filterBounds(bhutan.geometry()).filterDate(year + '-02-01', year + '-02-28').first();
var imgMar = imageCollection.filterBounds(bhutan.geometry()).filterDate(year + '-03-01', year + '-03-30').first();
var imgApr = imageCollection.filterBounds(bhutan.geometry()).filterDate(year + '-04-01', year + '-04-30').first();
var imgMay = imageCollection.filterBounds(bhutan.geometry()).filterDate(year + '-05-01', year + '-05-30').first();
var imgJun = imageCollection.filterBounds(bhutan.geometry()).filterDate(year + '-06-01', year + '-06-30').first();
var imgJul = imageCollection.filterBounds(bhutan.geometry()).filterDate(year + '-07-01', year + '-07-30').first();
var imgAug = imageCollection.filterBounds(bhutan.geometry()).filterDate(year + '-08-01', year + '-08-30').first();
var imgSep = imageCollection.filterBounds(bhutan.geometry()).filterDate(year + '-09-01', year + '-09-30').first();
var imgOct = imageCollection.filterBounds(bhutan.geometry()).filterDate(year + '-10-01', year + '-10-30').first();
var imgNov = imageCollection.filterBounds(bhutan.geometry()).filterDate(year + '-11-01', year + '-11-30').first();
var imgDec = imageCollection.filterBounds(bhutan.geometry()).filterDate(year + '-12-01', year + '-12-30').first();


// Rice growing zone
var riceZone = dem.gt(1500).and(dem.lte(2600));
Map.addLayer(riceZone.clip(paro), {}, 'riceZone', false);

// paro images
Map.addLayer(imgApr.mask(riceZone).clip(paro.geometry()), {bands: ['R','G','B'], 'min': -200, 'max': 1500}, 'Apr', false);
Map.addLayer(imgMay.mask(riceZone).clip(paro.geometry()), {bands: ['R','G','B'], 'min': -200, 'max': 1500}, 'May', false);
Map.addLayer(imgJun.mask(riceZone).clip(paro.geometry()), {bands: ['R','G','B'], 'min': -200, 'max': 1500}, 'Jun', false);
Map.addLayer(imgJul.mask(riceZone).clip(paro.geometry()), {bands: ['R','G','B'], 'min': -200, 'max': 1500}, 'Jul', false);
Map.addLayer(imgAug.mask(riceZone).clip(paro.geometry()), {bands: ['R','G','B'], 'min': -200, 'max': 1500}, 'Aug', false);
Map.addLayer(imgSep.mask(riceZone).clip(paro.geometry()), {bands: ['R','G','B'], 'min': -200, 'max': 1500}, 'Sep', false);
Map.addLayer(imgOct.mask(riceZone).clip(paro.geometry()), {bands: ['R','G','B'], 'min': -200, 'max': 1500}, 'Oct', false);
Map.addLayer(imgNov.mask(riceZone).clip(paro.geometry()), {bands: ['R','G','B'], 'min': -200, 'max': 1500}, 'Nov', false);
Map.addLayer(imgDec.mask(riceZone).clip(paro.geometry()), {bands: ['R','G','B'], 'min': -200, 'max': 1500}, 'Dec', false);


// nlcms
// 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
// water_body, snow, glacier, forest, riverbed, built_up,cropland, bare_soil, bare_rock, grassland, 

// print(ee.ImageCollection('projects/servir-hkh/RLCMS/HKH/landcover'));
var nlcms = ee.Image('projects/servir-hkh/RLCMS/HKH/landcover/hkh_landcover-' + year).clip(paro);
Map.addLayer(nlcms.updateMask(riceZone), {min:1, max:10, palette: '005CE6,73DFFF,73DFFF,267300,2197FF,E60000,FFFF00,D7C29E,E8BEFF,BAFFA3'}, 'RLCMS', false);

//
var paroBuildings  = ee.FeatureCollection('projects/sat-io/open-datasets/MSBuildings/Bhutan').filterBounds(paro);
var paroBuildingLayer = ee.Image().byte().paint(paroBuildings, 1).unmask(0);

var forest = nlcms.eq(4);
var builtUp = nlcms.eq(6);

// Mosaic: Apr to Oct
var riceMosaic = ee.ImageCollection.fromImages(ee.List([imgApr, imgMay, imgJun, imgJul, imgAug, imgSep, imgOct])).median().mask(riceZone);
riceMosaic = riceMosaic.updateMask(forest.eq(0));
// riceMosaic = riceMosaic.updateMask(paroBuildingLayer.eq(0));
Map.addLayer(riceMosaic.clip(paro.geometry()), {bands: ['R','G','B'], 'min': -200, 'max': 1500}, 'mosaic', false);


var snicImagery = ee.Algorithms.Image.Segmentation.SNIC({
  image: riceMosaic,
  size: 100, //changes the number and size of patches 
  compactness: 1, //degrees of irregularity of the patches from a square 
}).clip(paro);

Map.addLayer(snicImagery, {bands: ['clusters']}, 'snic clusters', false);

var noneMaskedRegion = riceMosaic.select(['B', 'G']).int32().reduceToVectors({
  reducer: ee.Reducer.firstNonNull(),
  geometry: paro,
  scale: 90,
  bestEffort: true,
  maxPixels: 1E13,
  tileScale: 16
});

// Make the training dataset for k-means.
var kMeansTraining = riceMosaic.sample({
  region: noneMaskedRegion.geometry(),
  scale: 30,
  numPixels: 500,
  seed: 20,
  geometries: true,
});
print('total training size', kMeansTraining.size());
Map.addLayer(kMeansTraining, {}, 'k-means training points', false);

// Instantiate the clusterer and train it.
var num_k_class = 7;
var kMeansClusterer = ee.Clusterer.wekaKMeans(num_k_class).train(kMeansTraining);

// Cluster the input using the trained clusterer.
var kMeansCluster = riceMosaic.cluster(kMeansClusterer).updateMask(riceZone);

// assign color
var clusterNumber = ee.List.sequence(0, num_k_class);



// canny edge detector
// var ndvi = riceMosaic.normalizedDifference(['N', 'R']);
// Map.addLayer(ndvi, {}, 'ndvi');
// var canny = ee.Algorithms.CannyEdgeDetector(ndvi, 0.05, 1);

// // Mask the image with itself to get rid of areas with no edges.
// canny = canny.updateMask(canny);
// print('canny', canny);
// Map.addLayer(canny, {min: 0, max: 1}, 'Edge');


// original palette and name
// we remapped below
var palette = ['FFFF00', '267300', 'E60000', '005CE6', 'FFFF00', 'FFFF00', '267300'];
var names = ['Cropland', 'Forest', 'Built-up', 'Water body', 'Cropland', 'Cropland', 'Forest'];


//  Palette with the colors
var legendPalettes = ['FFFF00', '267300', 'E60000', '005CE6'];
// name of the legend
var legendNames = ['Cropland', 'Forest', 'Built-up', 'Water body'];

// cluster legend
var clusterLegend = createPanel ();

// legend title
var legendTitle = 'K-Means Cluster';

addLegendTitle(legendTitle, clusterLegend);

// Add color and and names
for (var i = 0; i < legendNames.length; i++) {
  clusterLegend.add(makeRow(legendPalettes[i], legendNames[i]));
}

// add legend to map (alternatively you can also print the legend to the console)  
Map.add(clusterLegend);

// Display the clusters with random colors.
Map.addLayer(kMeansCluster.randomVisualizer(), {}, 'k-means clusters before remap', false);
Map.addLayer(kMeansCluster, {min:0, max:6, palette: palette}, 'k-means clusters', false);

// remap the clusters
var fromClass = [0, 1, 2, 3, 4, 5, 6];
// 0 - cropland
// 1 - forest
// 2 - Built up
// 3 - water body, and others
var toClass = [0, 1, 2, 3, 0, 0, 1];
kMeansCluster = kMeansCluster.remap(fromClass, toClass).rename('cluster');

var stratifiedPoints = kMeansCluster.addBands(ee.Image.pixelLonLat())
    .stratifiedSample({
      numPoints: 500,
      classBand: 'cluster',
      scale: 30,
      region: noneMaskedRegion.geometry(),
      seed: 3,
    }).map(function (f) {
      return f.setGeometry(ee.Geometry.Point([f.get('longitude'), f.get('latitude')]));
    });

print('number of points per class', stratifiedPoints.aggregate_histogram('cluster'));

print('stratifiedPoints', stratifiedPoints.limit(10));

var colors = ['678581', '008f83', 'bb2e8f', 'b14416', 'e3685b', '996df4', '7f4b84', '65b813'];
for (var i = 0; i < legendNames.length; i++) {
  // Map.addLayer(stratifiedPoints.filter(ee.Filter.eq('cluster', i)).draw(colors[i]), {}, 'cluster_' + i, false);
  Map.addLayer(samplePoints.filter(ee.Filter.eq('CLUSTERID', i)), {color: 'red'}, 'center_cluster_' + i, false);
  Map.addLayer(sampleBuffer.filter(ee.Filter.eq('CLUSTERID', i)).draw(colors[i]), {}, 'cluster_' + i, false);
}

// collection, description, assetId, maxVertices
Export.table.toAsset({
  collection: stratifiedPoints,
  description: 'stratifiedPoints_paro_2021',
  assetId: 'projects/servir-sco-assets/assets/Bhutan/ACES_2/stratifiedPoints_paro_2021',
});

Export.table.toDrive({
  collection: stratifiedPoints,
  description: 'stratifiedPoints_paro_2021',
  folder: 'stratifiedPoints_paro_2021',
  fileNamePrefix: 'stratifiedPoints_paro_2021',
  fileFormat: 'SHP',
});


// possible classes are cropland, forest, built-up, water body, and others

//


// set position of panel
var legend = createPanel();


//  Palette with the colors
var palette =['005CE6', '73DFFF', '73DFFF', '267300', '2197FF', 'E60000', 'FFFF00' ,'D7C29E', 'E8BEFF', 'BAFFA3'];

// name of the legend
var names = ['Water body', 'Snow', 'Glacier', 'Forest', 'Riverbed', 'Built-up', 'cropland', 'Bare soil', 'Bare rock', 'Grassland'];

// legend title
var legendTitle = 'NLCMS';

addLegendTitle(legendTitle, legend);

// Add color and and names
for (var i = 0; i < names.length; i++) {
  legend.add(makeRow(palette[i], names[i]));
}

// add legend to map (alternatively you can also print the legend to the console)  
Map.add(legend);  

var plotid = 1369;
Map.centerObject(samplePoints.filter(ee.Filter.eq('PLOTID', plotid)), 16);
Map.addLayer(samplePoints.filter(ee.Filter.eq('PLOTID', plotid)), {color: 'yellow'}, 'selected');

